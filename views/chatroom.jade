doctype html
html
  head
    title Realtime Communication Demo
    link(rel="stylesheet", href="/css/chatroom.css")
    script(src="/js/lib/jquery.min.js")
    script(src="/js/lib/adapter.js")
    script(src="/socket.io/socket.io.js")
    
  body(style="display:flex;display:-webkit-flex; width: 100%; height: 100%")
    input#selectFile(type="file", style="display: none")

    div#contentLeft(style="background-color: #3E3E3E;position:relative;flex:6")
      div#videoArea
        video#localVideo(autoplay=true)
        video#remoteVideo(autoplay=true)
        video#miniVideo(autoplay=true)
      
      div#leftButtons(style="position:absolute;top:5px;z-index:999;text-align:right;width:100%")
        button#muteAudioBtn(style="height:40px;margin:5px") Mute Audio
        button#muteVideoBtn(style="height:40px;margin:5px") Mute Video
        button#hangupBtn(style="height:40px;margin:5px;background-color:red") Hangup       
      
    div#contentRight(style="background-color:#E4E4E4;position:relative;flex:4")
      div#rightButtons(style="width:100%;position:absolute;top:0px;right:0px;z-index:999;text-align:right;border-bottom: 1px solid #3E3E3E")
        span#members(style="float:left; margin-top: 15px") Members: 
        button#sendFileBtn(style="height:40px;margin: 5px") SENT FILE
        button#videoCallBtn(style="height:40px;margin: 5px") VIDEO CALL        
      div#wrapContentRight(style="position:absolute;bottom:5px;width:100%;height:100%;text-align:center")
        div#wrapChatScreen(style="height:90%;width:90%;margin:0px auto;position:relative")
          div#chatScreen(style="top:60px;bottom:20px;width:100%;text-align:left;overflow:auto;position:absolute")
        textarea#inputText(style="height:10%;padding:5px;margin-top:-10px;resize:none;width:90%;border:1px solid #9e9e9e", placeholder="write some text...")
          
    script(src="/js/chatroom.js")         
    script(src="/js/rtcclient.js") 
    
    script.              
      var localStream;
      var roomId = #{roomId};
      var userId = Math.floor((Math.random() * 100000) + 99999);
      var mediaConstraints = { "audio": true, "video": { "optional": [{ "minWidth": "1280" }, { "minHeight": "720" }], "mandatory": {} } }
      
      function displayMessage(user, message) {
        var elemSpan = document.createElement('span');
        if(user == "Me") {
          elemSpan.style.color = "#3F51B5";  
        } else{
          elemSpan.style.color = "#9C27B0";
        }
        elemSpan.innerHTML = "<strong>" + user + "</strong>" + ": " + message;
        chatScreen.appendChild(elemSpan);
        var elemBr = document.createElement('br');
        chatScreen.appendChild(elemBr);
        chatScreen.scrollTop = 999999;
      }

      function displayImage(user, url) {
        var elemSpan = document.createElement('span');
        if(user == "Me") {
          elemSpan.style.color = "#3F51B5";  
        } else{
          elemSpan.style.color = "#9C27B0";
        }
        elemSpan.innerHTML = "<strong>" + user + "</strong>" + ": " + "<img src=" + url + ">" + "</img>";
        chatScreen.appendChild(elemSpan);
        var elemBr = document.createElement('br');
        chatScreen.appendChild(elemBr);
        chatScreen.scrollTop = 999999;
      }      
      
      function trace(text) {
        if (text[text.length - 1] === '\n') {
          text = text.substring(0, text.length - 1);
        }
        if (window.performance) {
          var now = (window.performance.now() / 1000).toFixed(3);
          console.log(now + ': ' + text);
        } else {
          console.log(text);
        }
      }   
            
      function startMediaStream() {
        navigator.mediaDevices.getUserMedia(mediaConstraints).then(function (stream) {
          localStream = stream;
          localVideo.src = window.URL.createObjectURL(new MediaStream(stream.getVideoTracks()));
          miniVideo.src = window.URL.createObjectURL(new MediaStream(stream.getVideoTracks()));
          trace("Start media stream!");            
        });
      }      
      
      function onMuteAudio() {
        var audioTracks = localStream.getAudioTracks();
        if (audioTracks.length === 0) {
          trace("No local audio available.");
          return;
        }
        for (var i = 0; i < audioTracks.length; ++i) {
          audioTracks[i].enabled = !audioTracks[i].enabled;
        }
        trace("Audio " + (audioTracks[0].enabled ? "unmuted." : "muted."));
        return Promise.resolve(audioTracks[0].enabled);
      }

      function onMuteVideo() {
        var videoTracks = localStream.getVideoTracks();
        if (videoTracks.length === 0) {
          trace("No local video available.");
          return;
        }
        for (var i = 0; i < videoTracks.length; ++i) {
          videoTracks[i].enabled = !videoTracks[i].enabled;
        }
        trace("Video " + (videoTracks[0].enabled ? "unmuted." : "muted."));
        return Promise.resolve(videoTracks[0].enabled);
      }
      
      function stopMediaStream() {
        var videoTracks = localStream.getVideoTracks();
        if (videoTracks.length === 0) {
          trace("No local video available.");
          return;
        }
        for (var i = 0; i < videoTracks.length; ++i) {
          videoTracks[i].stop();
        }        
        var audioTracks = localStream.getAudioTracks();
        if (audioTracks.length === 0) {
          trace("No local audio available.");
          return;
        }
        for (var i = 0; i < audioTracks.length; ++i) {
          audioTracks[i].stop();
        }        
      }
      
      muteAudioBtn.onclick = function(event) {
        onMuteAudio().then(function(enabled) {
          if(enabled) {
            muteAudioBtn.classList.remove("inactive");
          } else {
            muteAudioBtn.classList.add("inactive");
          }
        });
      }
            
      muteVideoBtn.onclick = function(event) {
        onMuteVideo().then(function(enabled) {
          if(enabled) {
            muteVideoBtn.classList.remove("inactive");
          } else {
            muteVideoBtn.classList.add("inactive");
          }
        });
      }
      
      hangupBtn.onclick = function(event) {
        stopMediaStream();
        contentLeft.style.display = "none";
        videoCallBtn.disabled = false;
      }
      
      videoCallBtn.onclick = function(event) {
        startMediaStream();
        contentLeft.style.display = "block";
        videoCallBtn.disabled = true;
      }
      
      inputText.onkeydown = function(event) {
        if((event.code == "Enter" || event.code == "NumpadEnter") && event.shiftKey == false) {
          if(inputText.value.trim() != '') {
            chatRoom.sendMessage(inputText.value.trim());
            displayMessage("Me", inputText.value.trim());
            inputText.value = '';
          }
          return false;
        }
      }      

      //////////////////////////////////
      var webSocket = io.connect();
      var joinRoom = false;
      var initator = false;
      var chatRoom = new ChatRoom(webSocket);
      
      chatRoom.onMessage = function (user, message) {
        displayMessage(user, message.trim());
      }         
    
      /////////////////////////////
      var servers = { "iceServers": [{ "urls": ["stun:192.168.38.162:3478", "turn:192.168.38.162:3478"] }], "certificates": [] };
      var rtccontains = null;
      var webRTCClient = new WebRTCClient();

      webRTCClient.addRemoteStream = function (event) {
          remoteStream = event.stream;
          remoteVideo.src = window.URL.createObjectURL(remoteStream);
          miniVideo.src = window.URL.createObjectURL(new MediaStream(localStream.getVideoTracks()));
          localVideo.pause();
          remoteVideo.classList.add("active");
          miniVideo.classList.add("active");
          trace("Add remoteStream " + event.stream.id);
      }

      webRTCClient.rtcRequest = function (user) {
          webRTCClient.initRTCConnection(servers);
          webRTCClient.createOffer();
          trace("RTC request connection!");
      }

      webRTCClient.rtcClose = function (user) {
          trace("RTC close connection!");
      }

      webRTCClient.rtcOffer = function (message) {
          var object = JSON.parse(message);
          webRTCClient.initRTCConnection(servers);
          webRTCClient.createAnswer(object.sdp);
          trace("RTC offer!");
      }

      webRTCClient.rtcAnswer = function (message) {
          var object = JSON.parse(message);
          webRTCClient.setRemoteDescription(new RTCSessionDescription(object.sdp));
          trace("RTC answer!");
      }

      webRTCClient.rtcCandidate = function (message) {
          var candidate = JSON.parse(message);
          webRTCClient.addIceCandidate(new RTCIceCandidate(candidate));
          trace("rtcCandidate: " + message);
      }

      webRTCClient.registSignaling(chatRoom);

      //////////////

      var receiveBuffer = [];
      var receiveBufferSize = 0;
      var sendFileSize = 0;

      selectFile.addEventListener('change', function (evt){
        var files = evt.target.files; // FileList object
        if(files.length == 1) {
          var file = files[0];
          sendFile(file);
        }
        trace("Files: " + files.length);
      }, false);     

      sendFileBtn.onclick = function(event) {
        // Check for the various File API support.
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          selectFile.click();
        } else {
          alert('The File APIs are not fully supported in this browser.');
        }
      }      
      
      function sendFile(file) {
        webRTCClient.sendData("start");
        sendFileSize = 0;
        trace("Send file size! " + file.size);
        readChunkFile(file, 0, 16 * 1024);
      }
      
      function readChunkFile(file, start, limit) {
        var fileReader = new FileReader();
        fileReader.onload = function(event) {
          sendFileSize += event.target.result.byteLength;
          webRTCClient.sendData(event.target.result);
          if(event.target.result.byteLength == limit) {
            readChunkFile(file, start + limit, limit);
          } else {
            webRTCClient.sendData("end:" + file.name);
            selectFile.value = "";
            trace("> " + sendFileSize);
            trace("Send file done! size: " + file.size);
          }
        }
        var blob = file.slice(start, start + limit);
        fileReader.readAsArrayBuffer(blob);
      }

      webRTCClient.onReceiveMessage = function (event) {
        trace(event);
        if (typeof event.data === "string") {
          trace("data: " + event.data);
          if(event.data == "start") {
            receiveBuffer = [];
            receiveBufferSize = 0;
          } else if (event.data.startsWith("end:")) {
            var fileName = event.data.slice(4);
            createFile2Download(fileName);
            trace("Receive file : " + fileName + " > total: " + receiveBufferSize);
          }
       } else {
          receiveBuffer.push(event.data);
          receiveBufferSize += event.data.byteLength;
        }
      }      
      
      function createFile2Download(fileName) {
        var received = new window.Blob(receiveBuffer);
        var url = window.URL.createObjectURL(received);
        displayImage("Me", url);
      }    

      //////////////////
      
      chatRoom.onJoined = function (user, roomsize) {
        if(user == userId && roomsize == 2) {
          webRTCClient.initRTCConnection(servers);
          webRTCClient.createOffer();
          trace("RTC request connection!");
        }
        trace("joined: " + user);
      }

      chatRoom.onLeaved = function (user, roomsize) {
        trace("leaved: " + user);
      }   

      chatRoom.connect(roomId, userId);

            

      
    
            