doctype html
html
  head
    title Realtime Communication Demo
    link(rel="stylesheet", href="/css/main.css")
  
  body
    input#selectFile(type="file", style="display: none")
    a#downloadFile(style="display:none;z-index:999;padding:30px 10px;top:40px;position:absolute;background-color:white")
    
    div#buttonBar(style="z-index: 999")
      div#confirmButtons(style="z-index: 999; display: none")
        button#homeBtn(style="") NEW ROOM
        button#sendFileBtn(style="background-color:#009BAF") SENT FILE
        button#startCallBtn(style="background-color: #4CAF50") START CALL
        
      div#controlButtons(style="z-index: 999; display: none")
        button#muteAudioBtn(style="") Mute Audio
        button#muteVideoBtn(style="") Mute Video
        button#hangupBtn(style="background-color:red") Hangup      
  
    div#chatScreen(style="display: block")
      video#localVideo(autoplay=true)
      video#remoteVideo(autoplay=true)
      video#miniVideo(autoplay=true)
      
    //- div#controlBtn(style="display: none; z-index: 999; position: absolute; width: 100%; bottom: 200px; text-align: center")
    //-   button#muteAudioBtn(style="background-color:#3B78E7;padding:10px;border:none;border-radius:10px;color:white") Mute Audio
    //-   button#muteVideoBtn(style="background-color:#3B78E7;padding:10px;border:none;border-radius:10px;color:white") Mute Video
    //-   button#hangupBtn(style="background-color:#3B78E7;padding:10px;border:none;border-radius:10px;color:white") Hangup
      
    p#notifyMsg(style="z-index: 999; padding: 5px;position: absolute; bottom: 0px; left: 10px; color: white; font-weight: bold; background-color: black")      
                
    script(src="/js/lib/jquery.min.js")
    script(src="/js/lib/adapter.js")
    script(src="/socket.io/socket.io.js")
    script(src="/js/room.js")
    script(src="/js/signaling.js")
    script(src="/js/webrtc.js")
    script(src="/js/main.js")

    script.        
      var localStream;
      var remoteStream;      
      var roomId = #{roomId};
      var userId = Math.floor((Math.random() * 100000) + 99999);
      var mediaConstraints = { "audio": true, "video": { "optional": [{ "minWidth": "1280" }, { "minHeight": "720" }], "mandatory": {} } }
    
      function showElement(elem) {
        elem.style.display = "block";
      }
      
      function closeElement(elem) {
        elem.style.display = "none";
      }      
      
      downloadFile.onclick = function () {
        $(downloadFile).slideUp("slow");  
      }      
      
      muteVideoBtn.onclick = function (event) {
        onMuteVideo().then(function (enabled) {
          if (enabled) {
            muteVideoBtn.classList.remove("inactive");
          } else {
            muteVideoBtn.classList.add("inactive");
          }
        });
      }

      muteAudioBtn.onclick = function (event) {
        onMuteAudio().then(function (enabled) {
          if (enabled) {
            muteAudioBtn.classList.remove("inactive");
          } else {
            muteAudioBtn.classList.add("inactive");
          }
        });
      }

      hangupBtn.onclick = function (event) {
        signaling.closeRTC();
        stopVideoCall();
        showElement(confirmButtons);
        closeElement(controlButtons);
        trace("> hangupBtn");
      }
      
      selectFile.addEventListener('change', function (evt){
        var files = evt.target.files; // FileList object
        if(files.length == 1) {
          var file = files[0];
          sendFile(file);
        }
        trace("Files: " + files.length);
      }, false);      
      
      var sendFileSize = 0;
      
      function sendFile(file) {
        webRTCClient.sendData("start");
        sendFileSize = 0;
        trace("Send file size! " + file.size);
        readChunkFile(file, 0, 16 * 1024);
      }
      
      function readChunkFile(file, start, limit) {
        var fileReader = new FileReader();
        fileReader.onload = function(event) {
          sendFileSize += event.target.result.byteLength;
          webRTCClient.sendData(event.target.result);
          //trace("Read chunks: " + event.target.result.byteLength + " / " + file.size);
          if(event.target.result.byteLength == limit) {
            readChunkFile(file, start + limit, limit);
          } else {
            webRTCClient.sendData("end:" + file.name);
            selectFile.value = "";
            trace("> " + sendFileSize);
            trace("Send file done! size: " + file.size);
          }
        }
        var blob = file.slice(start, start + limit);
        fileReader.readAsArrayBuffer(blob);
      }
      
      var receiveBuffer = [];
      var receiveBufferSize = 0;
      
      webRTCClient.onReceiveMessageCallback = function (event) {
        //trace("received data: " + (typeof event.data));
        if (typeof event.data === "string") {
          trace("data: " + event.data);
          if(event.data == "start") {
            receiveBuffer = [];
            receiveBufferSize = 0;
          } else if (event.data.startsWith("end:")) {
            var fileName = event.data.slice(4);
            createFile2Download(fileName);
            trace("Receive file : " + fileName + " > total: " + receiveBufferSize);
          }
       } else {
          receiveBuffer.push(event.data);
          receiveBufferSize += event.data.byteLength;
          //trace("Receive data : " + event.data.byteLength + " / " + receiveBufferSize);
        }
      }
      
      function createFile2Download(fileName) {
        var received = new window.Blob(receiveBuffer);
        var url = window.URL.createObjectURL(received);
        downloadFile.href = url;
        downloadFile.download = fileName;
        downloadFile.textContent = "Download file " + fileName;
        $(downloadFile).slideDown("slow");
      }
      
      sendFileBtn.onclick = function(event) {
        // Check for the various File API support.
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          selectFile.click();
        } else {
          alert('The File APIs are not fully supported in this browser.');
        }
      }

      homeBtn.onclick = function (event) {
         window.location = "/";
      }

      startCallBtn.onclick = function (event) {
        startVideoCall();
      }          
      
      function onRTCClosed(user) {
        stopVideoCall();
        trace("> onRTCClosed");
      }      
      
      function joinRoom(user, roomsize) {
        if(roomsize == 2) {
          startCallBtn.style.display = "inline-block";
        } else {
          startCallBtn.style.display = "none";
        }        
        trace("Room Size: " + roomsize);
      }
      
      function leaveRoom(user, roomsize) {
        if(roomsize == 2) {
          startCallBtn.style.display = "inline-block";
        } else {
          startCallBtn.style.display = "none";
        }        
        trace("Room Size: " + roomsize);
      }

      function addRemoteStream(stream) {
        remoteStream = stream;
        remoteVideo.src = window.URL.createObjectURL(remoteStream);
        miniVideo.src = window.URL.createObjectURL(new MediaStream(localStream.getVideoTracks()));
        localVideo.pause();
        remoteVideo.classList.add("active");
        miniVideo.classList.add("active");
        
        showElement(controlButtons);
        closeElement(confirmButtons);
        
        trace("Add remoteStream " + event.stream.id);
      }   
      
      function startVideoCall() {
        webRTCClient.createRTCConnection(servers);
        webRTCClient.addLocalStream(localStream);
        webRTCClient.createOffer().then(function (sdp) {
          signaling.sendOffer(sdp);
        });
        trace("Start video call!");
      }
      
      function stopVideoCall() {
        localVideo.src = window.URL.createObjectURL(new MediaStream(localStream.getVideoTracks()));
        localVideo.play();
        remoteVideo.classList.remove("active");
        remoteVideo.pause();
        miniVideo.classList.remove("active");
        miniVideo.pause();
        webRTCClient.closeRTCConnection();   
        showElement(confirmButtons);
        closeElement(controlButtons);
        trace("Stop video call!");
      }         

      function startMediaStream() {
        navigator.mediaDevices.getUserMedia(mediaConstraints).then(function (stream) {
          localStream = stream;
          
          //- if(stream.getVideoTracks().length == 0 || stream.getAudioTracks().length == 0) {
          //-   alert("Can not access media devices!"); 
          //-   window.location = "/";
          //-   return;
          //- }
          
          localVideo.src = window.URL.createObjectURL(new MediaStream(stream.getVideoTracks()));
          signaling.connect(roomId, userId);
          webRTCClient.createRTCConnection(servers);
          webRTCClient.createOffer().then(function (sdp) {
            signaling.sendOffer(sdp);
          });
          
          showElement(confirmButtons);
          trace("Start media stream!");            
        });
      }
      
      startMediaStream();
      
            